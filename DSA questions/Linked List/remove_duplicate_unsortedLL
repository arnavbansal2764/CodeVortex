// Given an unsorted Linked List, the task is to remove duplicates from the list. 

#include <bits/stdc++.h>
using namespace std;
class node
{
    public:
    int data;
    node* next;

    node(int val)
    {
        data = val;
        next = NULL;
    }
};
void insertAtTail(node* &head, int val)
{
    node* n = new node(val);
    if (head == NULL)
    {
        head = n;
        return;
    }
    node* temp = head;
    while (temp->next!=NULL)
    {
        temp=temp->next;
    }
    temp->next=n;
}
void display(node* &head)
{
    node* temp = head;
    while (temp!=NULL)
    {
        cout<<temp->data<<"->";
        temp=temp->next;
    }
    cout<<"NULL"<<endl;
}

void removeduplicate(node* &head)
{
    node* p1=head;
    node* p2;
    node* temp;
    while (p1!=NULL && p1->next!=NULL)
    {
        p2=p1;
        while (p2->next!=NULL)
        {
            if (p1->data==p2->next->data)
            {
                
                temp=p2->next;
                p2->next=p2->next->next;
                delete temp;
            }
            else
            {
                p2=p2->next;
            }
            
        }
        p1=p1->next;
    }
    

}
int main ()
{
    node* head = NULL;
    insertAtTail(head,12);
    insertAtTail(head,11);
    insertAtTail(head,12);
    insertAtTail(head,21);
    insertAtTail(head,41);
    insertAtTail(head,43);
    insertAtTail(head,21);
    display(head);
    removeduplicate(head);
    display(head);
    return 0;
}
